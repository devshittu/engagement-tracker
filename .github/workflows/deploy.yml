# name: Deploy to Production

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     environment: staging

#     env:
#       # These environment variables will be used by the generate-schema script.
#       DATABASE_PROVIDER: postgresql
#       # Although the generated schema will have hardcoded URLs, we still pass these
#       # for consistency in logging and any potential future use.
#       DATABASE_URL: ${{ secrets.DATABASE_URL }} # e.g., transaction pooler URL
#       DIRECT_URL: ${{ secrets.DIRECT_URL }}
#       NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
#       NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
#       SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
#       NEXT_PUBLIC_ENABLE_DEBUG_LOGS: 'true'

#     steps:
#       - name: Check out repository
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18' # Adjust to your required version

#       - name: Install dependencies
#         run: yarn install --frozen-lockfile --legacy-peer-deps

#       # Generate the Prisma schema from the template
#       - name: Generate Prisma Schema
#         run: yarn prisma:generate-schema
#         env:
#           DATABASE_PROVIDER: ${{ env.DATABASE_PROVIDER }}

#       # Generate Prisma Client to ensure it is up to date
#       - name: Generate Prisma Client
#         run: yarn prisma generate --schema=prisma/schema.prisma

#       # Apply migrations to update the production database
#       - name: Deploy Prisma Migrations
#         run: yarn prisma migrate deploy --schema=prisma/schema.prisma

#       # Conditionally reset the production database if commit message contains "reset db" or "db reset"
#       - name: Conditionally Reset Production Database
#         if: contains(github.event.head_commit.message, 'reset db') || contains(github.event.head_commit.message, 'db reset')
#         run: yarn db:reset:prod
#         env:
#           NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
#           NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
#           SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
#           DATABASE_URL: ${{ secrets.DATABASE_URL }}
#           DIRECT_URL: ${{ secrets.DIRECT_URL }}
#           DATABASE_PROVIDER: postgresql
#           NEXT_PUBLIC_ENABLE_DEBUG_LOGS: 'true'

#       # Build the Next.js application
#       - name: Build Next.js App
#         run: yarn build
#         env:
#           NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
#           NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
#           SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
#           DATABASE_URL: ${{ env.DATABASE_URL }}
#           DIRECT_URL: ${{ env.DIRECT_URL }}
#           NEXT_PUBLIC_ENABLE_DEBUG_LOGS: 'true'

#       # Deploy to Vercel
#       - name: Deploy to Vercel
#         uses: amondnet/vercel-action@v25
#         with:
#           vercel-token: ${{ secrets.VERCEL_TOKEN }}
#           vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
#           vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
#           vercel-args: '--prod --force'
#           # vercel-args: '--force'
#         env:
#           DATABASE_URL: ${{ env.DATABASE_URL }}
#           DIRECT_URL: ${{ env.DIRECT_URL }}
#           DATABASE_PROVIDER: ${{ env.DATABASE_PROVIDER }}
#           NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
#           NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
#           SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
#           NEXT_PUBLIC_ENABLE_DEBUG_LOGS: 'true'git commit -m "fix(supabase): resolve connectivity and authentication issues in dev/staging" -m "- Addressed `TypeError: Cannot read properties of undefined (reading 'name')` in `authMiddleware.ts` by adding null checks for `userRole`.\n- Enhanced Supabase client configuration validation in `supabase.ts` with detailed logging of environment variables (masked sensitive data).\n- Added robust error logging in `middleware.ts` to capture Supabase query responses and failures.\n- Created a test API route `/api/test-supabase` to independently verify Supabase connectivity.\n- Synced Prisma schema and re-seeded dev/staging database to ensure schema and data consistency.\n- Updated `authMiddleware.ts` to handle missing roles gracefully, preventing runtime errors.\n- Ensured compatibility with Next.js 15, Prisma v5.22.0, and Supabase v2.49.1.\n\nBREAKING-CHANGE: None"

name: Deploy to Environments

on:
  push:
    branches:
      - main
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Dynamically set the environment based on the branch
    environment: ${{ github.ref_name == 'main' && 'prod' || 'staging' }}

    env:
      # These environment variables will be used by the generate-schema script.
      DATABASE_PROVIDER: postgresql
      # Although the generated schema will have hardcoded URLs, we still pass these
      # for consistency in logging and any potential future use.
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DIRECT_URL: ${{ secrets.DIRECT_URL }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      NEXT_PUBLIC_ENABLE_DEBUG_LOGS: ${{ vars.NEXT_PUBLIC_ENABLE_DEBUG_LOGS }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --legacy-peer-deps

      # Generate the Prisma schema from the template
      - name: Generate Prisma Schema
        run: yarn prisma:generate-schema
        env:
          DATABASE_PROVIDER: ${{ env.DATABASE_PROVIDER }}

      # Generate Prisma Client to ensure it is up to date
      - name: Generate Prisma Client
        run: yarn prisma generate --schema=prisma/schema.prisma

      # - name: Reset Staging Database
      #   if: github.ref_name == 'staging'
      #   run: yarn db:reset:prod
      #   env:
      #     DATABASE_URL: ${{ secrets.DATABASE_URL }}
      #     DIRECT_URL: ${{ secrets.DIRECT_URL }}
      #     DATABASE_PROVIDER: postgresql
      #     NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      #     NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      #     SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      #     NEXT_PUBLIC_ENABLE_DEBUG_LOGS: 'true'

      # Apply migrations to update the production database
      - name: Deploy Prisma Migrations
        run: yarn prisma migrate deploy --schema=prisma/schema.prisma

      # Conditionally reset the production database if commit message contains "reset db" or "db reset"
      - name: Conditionally Reset Database
        if: contains(github.event.head_commit.message, 'reset db') || contains(github.event.head_commit.message, 'db reset')
        run: yarn db:reset:prod
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          DATABASE_PROVIDER: postgresql
          NEXT_PUBLIC_ENABLE_DEBUG_LOGS: ${{ vars.NEXT_PUBLIC_ENABLE_DEBUG_LOGS }}

      - name: Build Next.js App
        run: yarn build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
          NEXT_PUBLIC_ENABLE_DEBUG_LOGS: ${{ vars.NEXT_PUBLIC_ENABLE_DEBUG_LOGS }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.ref_name == 'main' && '--prod --force' || '--force' }}
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DIRECT_URL: ${{ env.DIRECT_URL }}
          DATABASE_PROVIDER: ${{ env.DATABASE_PROVIDER }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_ENABLE_DEBUG_LOGS: ${{ vars.NEXT_PUBLIC_ENABLE_DEBUG_LOGS }}
# .github/workflows/deploy.yml
